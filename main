import tkinter
from tkinter import *
from tkinter import scrolledtext, messagebox
from tkinter import ttk
variable = 0

# Opening the list of books
books = open("books.txt", "r+").read()
book_list = books.split("\n")

# Opening the list of authors
authors = open("authors.txt", "r+").read()
author_list = authors.split("\n")

# Opening the list of types
types = open("types.txt", "r+").read()
type_list = types.split("\n")

# Opening the list of ISBNs
ISBNs = open("ISBNs.txt", "r+").read()
ISBN_list = ISBNs.split("\n")


def read_library_data():
    try:
        with open("books.txt", "r", encoding="utf-8") as f1, open("authors.txt", "r", encoding="utf-8") as f2, open(
                  "types.txt", "r", encoding="utf-8") as f3, open("ISBNs.txt", "r", encoding="utf-8") as f4:

            read_titles = [line.strip() for line in f1.readlines()]
            read_authors = [line.strip() for line in f2.readlines()]
            read_types = [line.strip() for line in f3.readlines()]
            read_isbns = [line.strip() for line in f4.readlines()]

            # Ensure all lists are of equal length
            min_length = min(len(read_titles), len(read_authors), len(read_types))
            return list(zip(read_titles[:min_length], read_authors[:min_length], read_types[:min_length], read_isbns[:min_length]))

    except FileNotFoundError as e:
        print(f"Error: {e}")
        return []


def display_books():
    # Clear existing rows
    for row in tree.get_children():
        tree.delete(row)

    # Insert new rows
    for idx, (title, author, book_type, isbn) in enumerate(read_library_data(), start=1):
        tree.insert("", "end", values=(title, author, book_type, isbn))


def print_stuff():
    global books
    global book_list
    global authors
    global author_list
    global types
    global type_list
    global ISBNs
    global ISBN_list
    books = open("books.txt", "r+").read()
    book_list = books.split("\n")
    authors = open("authors.txt", "r+").read()
    author_list = authors.split("\n")
    types = open("types.txt", "r+").read()
    type_list = types.split("\n")
    ISBNs = open("ISBNs.txt", "r+").read()
    ISBN_list = ISBNs.split("\n")
    list_window = Toplevel()
    list_window.title("Entries:")
    list_area = scrolledtext.ScrolledText(list_window, wrap=tkinter.WORD, width=60, height=20)
    for i in range(len(book_list)):
        if type_list[i] == "Book":
            list_area.insert(END, str(i) + ". " + book_list[i])
            list_area.insert(END, "\n      By " + author_list[i] + " (" + type_list[i] + ")" + "(ISBN: " + ISBN_list[i] + ")")
        elif type_list[i] == "Movie":
            list_area.insert(END, str(i) + ". " + book_list[i])
            list_area.insert(END, "\n      Directed by " + author_list[i] + " (" + type_list[i] + ")")
        else:
            list_area.insert(END, str(i) + ". " + book_list[i])
            list_area.insert(END, "\n      By " + author_list[i] + " (" + type_list[i] + ")")
        list_area.insert(END, "\n")
    list_area.pack(fill=BOTH, side=LEFT, expand=TRUE)
    open("books.txt", "r+").close()
    open("authors.txt", "r+").close()
    open("types.txt", "r+").close()
    open("ISBNs.txt", "r+").close()
    return "nothing"


def save_new_entry():
    # Create a new window
    new_window = tkinter.Toplevel()
    new_window.title("Add New Book Entry")
    new_window.geometry("400x300")

    # Labels and Entries
    tkinter.Label(new_window, text="Title:").pack()
    title_entry = tkinter.Entry(new_window)
    title_entry.pack()

    tkinter.Label(new_window, text="Author:").pack()
    author_entry = tkinter.Entry(new_window)
    author_entry.pack()

    # Dropdown for Type
    tkinter.Label(new_window, text="Type:").pack()
    media_types = ["Book", "Magazine", "Newspaper", "Movie", "Audiobook", "eBook"]
    type_var = tkinter.StringVar(new_window)
    type_var.set(media_types[0])  # Default value
    type_menu = ttk.Combobox(new_window, textvariable=type_var, values=media_types, state="readonly")
    type_menu.current(0)
    type_menu.pack()

    tkinter.Label(new_window, text="ISBN (only for Books):").pack()
    isbn_entry = tkinter.Entry(new_window)
    isbn_entry.pack()

    # Save button
    def save_entry():
        new_title = title_entry.get().strip()
        new_author = author_entry.get().strip()
        new_type = type_var.get().strip()
        new_isbn = isbn_entry.get().strip()

        if not new_title or not new_author or not new_type:
            messagebox.showerror("Error", "All fields except ISBN must be filled")
            return

        with open("books.txt", "r") as books_file, open("ISBNs.txt", "r") as ISBNs_file:
            books_text = books_file.read()
            ISBNs_text = ISBNs_file.read()

        if new_title in books_text:
            messagebox.showerror("Error", "Duplicate book title")
            return

        if new_type == "Book":
            if len(new_isbn) != 13:
                messagebox.showerror("Error", "ISBN must be 13 digits")
                return
            try:
                digits = [int(d) for d in new_isbn]
            except ValueError:
                messagebox.showerror("Error", "ISBN must contain only numbers")
                return

            if not (digits[0] == 9 and digits[1] == 7 and (digits[2] == 8 or digits[2] == 9)):
                messagebox.showerror("Error", "Invalid ISBN prefix (must start with 978 or 979)")
                return

            if (sum(digits[i] if i % 2 == 0 else digits[i] * 3 for i in range(13))) % 10 != 0:
                messagebox.showerror("Error", "Invalid ISBN checksum")
                return

            if new_isbn in ISBNs_text:
                messagebox.showerror("Error", "Duplicate ISBN number")
                return

        # Save to files
        with open("books.txt", "a") as books_file, open("authors.txt", "a") as authors_file, open("types.txt",
                                                                                                  "a") as types_file, open(
                "ISBNs.txt", "a") as ISBNs_file:
            books_file.write("\n" + new_title)
            authors_file.write("\n" + new_author)
            types_file.write("\n" + new_type)
            if new_type == "Book":
                ISBNs_file.write("\n" + new_isbn)
            else:
                ISBNs_file.write("\n")

        messagebox.showinfo("Success", "Entry added successfully!")
        new_window.destroy()  # Close the entry window after saving

    tkinter.Button(new_window, text="Save Entry", command=save_entry).pack(pady=10)


def delete_entry():
    if len(deletePosition.get()) > 0:
        if str(deletePosition.get()) == str(len(open("books.txt", "r").readlines())-1):
            repeater = 2
        else:
            repeater = 1
    else:
        repeater = 0
    for an_amazing_variable_name in range(repeater):
        len_list = 0
        rebuilding_book_list = []
        rebuilding_author_list = []
        rebuilding_type_list = []
        rebuilding_isbn_list = []
        with (open("books.txt", "r+") as books_file):
            with open("authors.txt", "r+") as authors_file:
                with open("types.txt", "r+") as types_file:
                    with open("ISBNs.txt", "r+") as ISBNs_file:
                        with open("books.txt", "r") as books_file_2:
                            with open("authors.txt", "r") as authors_file_2:
                                with open("types.txt", "r") as types_file_2:
                                    if deletePosition.get().isdigit():
                                        if 0 <= int(deletePosition.get()) <= len(books_file_2.readlines()):
                                            for i in range(len(authors_file_2.read())):
                                                if not i == int(deletePosition.get()):
                                                    if not types_file_2.readline() == "":
                                                        rebuilding_book_list.append(books_file.readline())
                                                        rebuilding_author_list.append(authors_file.readline())
                                                        rebuilding_type_list.append(types_file.readline())
                                                        rebuilding_isbn_list.append(ISBNs_file.readline())
                                                        len_list += 1
                                                else:
                                                    books_file.readline()
                                                    authors_file.readline()
                                                    types_file.readline()
                                                    ISBNs_file.readline()
                                            books_file.close()
                                            authors_file.close()
                                            types_file.close()
                                            ISBNs_file.close()
                                            books_file_2.close()
                                            authors_file_2.close()
                                            types_file_2.close()
                                        else:
                                            messagebox.showerror("Error", "Invalid entry position")
                                            return "no thing"
                                    else:
                                        messagebox.showerror("Error", "Invalid entry position")
                                        return "nothings"
        with open("books.txt", "w+") as books_file_w:
            with open("authors.txt", "w+") as authors_file_w:
                with open("types.txt", "w+") as types_file_w:
                    with open("ISBNs.txt", "w+") as ISBNs_file_w:
                        for i in range(len_list):
                            if not (i + 1 >= len_list and int(deletePosition.get()) == len_list):
                                books_file_w.write(rebuilding_book_list[i])
                                authors_file_w.write(rebuilding_author_list[i])
                                types_file_w.write(rebuilding_type_list[i])
                                ISBNs_file_w.write(rebuilding_isbn_list[i])
                            else:
                                books_file_w.write(rebuilding_book_list[i][:-1])
                                authors_file_w.write(rebuilding_author_list[i][:-1])
                                types_file_w.write(rebuilding_type_list[i][:-1])
                                ISBNs_file_w.write(rebuilding_isbn_list[i][:-1])
                        books_file_w.close()
                        authors_file_w.close()
                        types_file_w.close()
                        ISBNs_file_w.close()
    return "nothing"


def search():
    global books, book_list, authors, author_list, types, type_list, ISBNs, ISBN_list

    # Load data from files
    books = open("books.txt", "r").read()
    book_list = books.split("\n")
    authors = open("authors.txt", "r").read()
    author_list = authors.split("\n")
    types = open("types.txt", "r").read()
    type_list = types.split("\n")
    ISBNs = open("ISBNs.txt", "r").read()
    ISBN_list = ISBNs.split("\n")

    lower_books = books.lower().split("\n")
    lower_authors = authors.lower().split("\n")
    lower_types = types.lower().split("\n")
    lower_isbns = ISBNs.lower().split("\n")

    # Clear current entries in the Treeview
    for item in tree.get_children():
        tree.delete(item)

    search_term = searchText.get().lower()
    search_type_index = searchType.current()

    # Search logic based on selected search type
    for i in range(len(book_list)):
        match = False
        if search_type_index == 0 and search_term in lower_books[i]:
            match = True
        elif search_type_index == 1 and search_term in lower_authors[i]:
            match = True
        elif search_type_index == 2 and search_term in lower_types[i]:
            match = True
        elif search_type_index == 3 and search_term in lower_isbns[i]:
            match = True

        if match:
            tree.insert('', 'end', values=(
                book_list[i],
                author_list[i],
                type_list[i],
                ISBN_list[i]
            ))


def show_help():
    help_text = (
        "📚 How to Use the Library Database:\n\n"
        "➡️ See All Entries:\n"
        "- Click 'See All Entries (old format)' or 'Update Entries' to view the current list of stored books.\n\n"
        "✏️ Edit Selected Entry Info:\n"
        "- Select a book from the chart to edit, and then press 'Edit Selected Entry'.\n"
        "- Edit the fields you would like to change and then press 'Save Changes'.\n\n"
        "➕ Add a New Entry:\n"
        "- Fill out the title, author, type, and ISBN fields.\n"
        "- Click 'Save new entry' to add it.\n\n"
        "🗑 Delete an Entry:\n"
        "- Type the entry number into the delete box and click 'Delete item at position:'.\n\n"
        "🔍 Search:\n"
        "- Select a category and type a search term, then click 'Search'.\n\n"
        "❓ Need more help?\n"
        "- Ask ChatGPT."
    )
    messagebox.showinfo("How to Use This Project", help_text)


def on_resize(a):
    width = root.winfo_width()
    height = root.winfo_height()
    btnDisplay.place(x=width - 350, y=height // 2 - 145)
    btnEdit.place(x=width - 355, y=height // 2 + 120)


def edit_selected_entry():
    selected = tree.selection()
    if not selected:
        messagebox.showerror("Error", "No entry selected")
        return

    item = tree.item(selected)
    item_values = item['values']

    edit_window = Toplevel(root)
    edit_window.title("Edit Entry")
    edit_window.geometry("400x300")

    Label(edit_window, text="Title:").pack()
    title_entry = Entry(edit_window)
    title_entry.pack()
    title_entry.insert(0, item_values[1])

    Label(edit_window, text="Author:").pack()
    author_entry = Entry(edit_window)
    author_entry.pack()
    author_entry.insert(0, item_values[2])

    Label(edit_window, text="Type (Book/Movie):").pack()
    type_entry = Entry(edit_window)
    type_entry.pack()
    type_entry.insert(0, item_values[3])

    Label(edit_window, text="ISBN (blank for movies):").pack()
    isbn_entry = Entry(edit_window)
    isbn_entry.pack()
    isbn_entry.insert(0, item_values[4])

    def save_changes():
        idx = item_values[0]

        # Read current data
        with open("books.txt", "r") as f:
            book_lines = f.readlines()
        with open("authors.txt", "r") as f:
            author_lines = f.readlines()
        with open("types.txt", "r") as f:
            type_lines = f.readlines()
        with open("ISBNs.txt", "r") as f:
            isbn_lines = f.readlines()

        new_title = title_entry.get().strip()
        new_author = author_entry.get().strip()
        new_type = type_entry.get().strip()
        new_isbn = isbn_entry.get().strip()

        # Open full file texts for duplication checks
        with open("books.txt", "r") as books_file, open("ISBNs.txt", "r") as ISBNs_file:
            books_text = books_file.read()
            ISBNs_text = ISBNs_file.read()

        # --- VALIDATION ---
        if not new_title or not new_author or not new_type:
            messagebox.showerror("Error", "All fields except ISBN must be filled")
            return

        if new_title != book_lines[int(idx)].strip() and new_title in books_text:
            messagebox.showerror("Error", "Duplicate book title")
            return

        if new_type == "Book":
            if len(new_isbn) != 13:
                messagebox.showerror("Error", "ISBN must be 13 digits")
                return
            try:
                digits = [int(d) for d in new_isbn]
            except ValueError:
                messagebox.showerror("Error", "ISBN must contain only numbers")
                return

            if not (digits[0] == 9 and digits[1] == 7 and (digits[2] == 8 or digits[2] == 9)):
                messagebox.showerror("Error", "Invalid ISBN prefix (must start with 978 or 979)")
                return

            if (sum(digits[i] if i % 2 == 0 else digits[i] * 3 for i in range(13))) % 10 != 0:
                messagebox.showerror("Error", "Invalid ISBN checksum")
                return

            if new_isbn != isbn_lines[int(idx)].strip() and new_isbn in ISBNs_text:
                messagebox.showerror("Error", "Duplicate ISBN number")
                return

        # --- END VALIDATION ---

        # Update specific lines
        book_lines[int(idx)] = new_title + "\n"
        author_lines[int(idx)] = new_author + "\n"
        type_lines[int(idx)] = new_type + "\n"
        isbn_lines[int(idx)] = new_isbn + "\n"

        # Write back to files
        with open("books.txt", "w") as f:
            f.writelines(book_lines)
        with open("authors.txt", "w") as f:
            f.writelines(author_lines)
        with open("types.txt", "w") as f:
            f.writelines(type_lines)
        with open("ISBNs.txt", "w") as f:
            f.writelines(isbn_lines)

        # Update Treeview immediately
        tree.item(selected, values=(idx, new_title, new_author, new_type, new_isbn))
        edit_window.destroy()
        messagebox.showinfo("Success", "Entry updated successfully!")

    Button(edit_window, text="Save Changes", command=save_changes).pack(pady=10)


# Creating a tkinter window
root = Tk()
root.geometry('1000x600')
root.title("Library Database")

# Frame for the table
table_frame = Frame(root)
table_frame.pack(side=RIGHT, fill=NONE, expand=False, padx=10, pady=10)

# Scrollbar
table_scroll = Scrollbar(table_frame)
table_scroll.pack(side=RIGHT, fill=Y, expand=False)

# Treeview widget
tree = ttk.Treeview(table_frame, yscrollcommand=table_scroll.set, selectmode="browse")
tree.pack(fill=BOTH, expand=False)

table_scroll.config(command=tree.yview)

# Define table columns
tree['columns'] = ("Title", "Author", "Type", "ISBN")

tree.column("#0", width=0, stretch=NO)
tree.column("Title", anchor=W, width=200, stretch=NO)
tree.column("Author", anchor=W, width=100, stretch=NO)
tree.column("Type", anchor=CENTER, width=80, stretch=NO)
tree.column("ISBN", anchor=W, width=130, stretch=NO)

# Define headings
tree.heading("#0", text="", anchor=W)
tree.heading("Title", text="Title", anchor=W)
tree.heading("Author", text="Author", anchor=W)
tree.heading("Type", text="Type", anchor=CENTER)
tree.heading("ISBN", text="ISBN", anchor=W)

# Button to load/display the data
btnDisplay = Button(root, text="Update Entries", command=display_books, cursor="hand2")
btnDisplay.place(x=len("The x originally will not matter because it will change when the window size changes (including"
                       " when the screen loads)."), y=len("The y doesn't matter either."))

display_books()

# Creating the See Books button
btnSeeBooks = Button(root, text="See all entries (old format)", command=print_stuff, cursor="hand2")
btnSeeBooks.place(x=5, y=5)

# Creating the save new entry button
btnSaveNewEntry = Button(root, text="Save new entry", command=save_new_entry, cursor="hand2")
btnSaveNewEntry.place(x=5, y=308)

# Creating the input areas for the new entry button
bookText = Label(root, text="Name:")
bookText.place(x=5, y=341)
newTitle = Entry(root, width=45, bg="light yellow")
newTitle.place(x=48, y=341)

authorText = Label(root, text="Author/director/creator:")
authorText.place(x=5, y=366)
newAuthor = Entry(root, width=20, bg="light yellow")
newAuthor.place(x=140, y=366)

typeText = Label(root, text="Type:")
typeText.place(x=5, y=391)
newType = Entry(root, width=7, bg="light yellow")
newType.place(x=42, y=391)

ISBNText = Label(root, text="ISBN (for books only):")
ISBNText.place(x=5, y=416)
newISBN = Entry(root, width=13, bg="light yellow")
newISBN.place(x=127, y=416)

# Delete item button
deleteButton = Button(root, text="Delete item at position:", command=delete_entry)
deleteButton.place(x=5, y=473)
deletePosition = Entry(root, width=3, bg="light yellow")
deletePosition.place(x=140, y=476)

# Search button
searchButton = Button(root, text="Search", command=search)
searchButton.place(x=5, y=525)
searchType = ttk.Combobox(state="readonly", values=["Name", "Author/creator", "Type", "ISBN"])
searchType.place(x=55, y=527)
searchText = Entry(root, width=45, bg="light yellow")
searchText.place(x=5, y=560)

help_button = Button(root, text="❓", command=show_help, cursor="question_arrow")
help_button.place(x=160, y=5)

btnEdit = Button(root, text="Edit Selected Entry", command=edit_selected_entry, cursor="hand2")
btnEdit.place(x=5, y=35)

root.bind("<Configure>", on_resize)

root.mainloop()
