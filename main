import tkinter as tk
from tkinter import messagebox
import sqlite3


# ----------------------
# DATABASE SETUP
# ----------------------
def connect():
    conn = sqlite3.connect("library.db")
    cur = conn.cursor()
    cur.execute("""
    CREATE TABLE IF NOT EXISTS book (
        id INTEGER PRIMARY KEY,
        title TEXT UNIQUE,
        author TEXT,
        year INTEGER,
        isbn TEXT UNIQUE
    )""")
    conn.commit()
    conn.close()


def insert(title, author, year, isbn):
    conn = sqlite3.connect("library.db")
    cur = conn.cursor()

    # Check if the title or ISBN already exists
    cur.execute("SELECT * FROM book WHERE title=? OR isbn=?", (title, isbn))
    existing_book = cur.fetchone()

    if existing_book:
        messagebox.showwarning("Duplicate Entry", "A book with this title or ISBN already exists!")
        conn.close()
        return

    cur.execute("INSERT INTO book VALUES (NULL, ?, ?, ?, ?)", (title, author, year, isbn))
    conn.commit()
    conn.close()


def view():
    conn = sqlite3.connect("library.db")
    cur = conn.cursor()
    cur.execute("SELECT * FROM book")
    rows = cur.fetchall()
    conn.close()
    return rows


def search(title="", author="", year="", isbn=""):
    conn = sqlite3.connect("library.db")
    cur = conn.cursor()
    cur.execute("""
    SELECT * FROM book WHERE 
    title LIKE ? AND 
    author LIKE ? AND 
    year LIKE ? AND 
    isbn LIKE ?""",
                (f'%{title}%', f'%{author}%', f'%{year}%', f'%{isbn}%'))
    rows = cur.fetchall()
    conn.close()
    return rows


def delete(id):
    conn = sqlite3.connect("library.db")
    cur = conn.cursor()
    cur.execute("DELETE FROM book WHERE id=?", (id,))
    conn.commit()
    conn.close()


def update(id, title, author, year, isbn):
    conn = sqlite3.connect("library.db")
    cur = conn.cursor()
    cur.execute("""
    UPDATE book SET 
    title=?, author=?, year=?, isbn=? 
    WHERE id=?""", (title, author, year, isbn, id))
    conn.commit()
    conn.close()


# ----------------------
# GUI SETUP
# ----------------------
def get_selected_row(event):
    global selected_tuple
    index = listbox.curselection()
    if index:
        index = index[0]
        selected_tuple = listbox.get(index)
        entry_title.delete(0, tk.END)
        entry_title.insert(tk.END, selected_tuple[1])
        entry_author.delete(0, tk.END)
        entry_author.insert(tk.END, selected_tuple[2])
        entry_year.delete(0, tk.END)
        entry_year.insert(tk.END, selected_tuple[3])
        entry_isbn.delete(0, tk.END)
        entry_isbn.insert(tk.END, selected_tuple[4])


def view_command():
    listbox.delete(0, tk.END)
    for row in view():
        listbox.insert(tk.END, row)


def search_command():
    listbox.delete(0, tk.END)
    for row in search(title_text.get(), author_text.get(), year_text.get(), isbn_text.get()):
        listbox.insert(tk.END, row)


def add_command():
    if title_text.get() and author_text.get():
        insert(title_text.get(), author_text.get(), year_text.get(), isbn_text.get())
        view_command()
    else:
        messagebox.showwarning("Input error", "Title and Author are required!")


def delete_command():
    try:
        delete(selected_tuple[0])
        view_command()
    except:
        messagebox.showwarning("Selection error", "Please select a book to delete.")


def update_command():
    try:
        update(selected_tuple[0], title_text.get(), author_text.get(), year_text.get(), isbn_text.get())
        view_command()
    except:
        messagebox.showwarning("Selection error", "Please select a book to update.")


# ----------------------
# GUI DESIGN
# ----------------------
window = tk.Tk()
window.title("Library Database")

# Use a frame for better layout control
frame = tk.Frame(window, bg='#f0f0f0', padx=20, pady=20)
frame.pack(padx=10, pady=10)

# Labels
label_font = ('Arial', 12, 'bold')
tk.Label(frame, text="Title", font=label_font, bg='#f0f0f0').grid(row=0, column=0, padx=5, pady=5)
tk.Label(frame, text="Author", font=label_font, bg='#f0f0f0').grid(row=0, column=2, padx=5, pady=5)
tk.Label(frame, text="Year", font=label_font, bg='#f0f0f0').grid(row=1, column=0, padx=5, pady=5)
tk.Label(frame, text="ISBN", font=label_font, bg='#f0f0f0').grid(row=1, column=2, padx=5, pady=5)

# Entry fields
entry_font = ('Arial', 12)
title_text = tk.StringVar()
entry_title = tk.Entry(frame, textvariable=title_text, font=entry_font, width=30)
entry_title.grid(row=0, column=1, padx=5, pady=5)

author_text = tk.StringVar()
entry_author = tk.Entry(frame, textvariable=author_text, font=entry_font, width=30)
entry_author.grid(row=0, column=3, padx=5, pady=5)

year_text = tk.StringVar()
entry_year = tk.Entry(frame, textvariable=year_text, font=entry_font, width=30)
entry_year.grid(row=1, column=1, padx=5, pady=5)

isbn_text = tk.StringVar()
entry_isbn = tk.Entry(frame, textvariable=isbn_text, font=entry_font, width=30)
entry_isbn.grid(row=1, column=3, padx=5, pady=5)

# Listbox and Scrollbar
listbox_frame = tk.Frame(window)
listbox_frame.pack(pady=10)

listbox = tk.Listbox(listbox_frame, height=10, width=70, font=('Arial', 12), selectmode=tk.SINGLE)
listbox.pack(side=tk.LEFT)

scrollbar = tk.Scrollbar(listbox_frame, orient=tk.VERTICAL)
scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

listbox.configure(yscrollcommand=scrollbar.set)
scrollbar.configure(command=listbox.yview)
listbox.bind('<<ListboxSelect>>', get_selected_row)


# Buttons with improved style
def hover(event, button):
    button.config(bg='#80c9ff')


def leave(event, button):
    button.config(bg='#4a90e2')


button_font = ('Arial', 12)


def create_button(window, text, command, row, column, columnspan=1):
    button = tk.Button(window, text=text, font=button_font, bg='#4a90e2', fg='white', width=20, height=2,
                       command=command)
    button.grid(row=row, column=column, padx=10, pady=10, columnspan=columnspan)
    button.bind("<Enter>", lambda event, button=button: hover(event, button))
    button.bind("<Leave>", lambda event, button=button: leave(event, button))
    return button


# Organizing buttons in a grid (grouped into categories)

# Section 1: Data Viewing (View All, Search)
create_button(frame, "View All Books", view_command, 2, 0, columnspan=2)
create_button(frame, "Search Books", search_command, 3, 0, columnspan=2)

# Section 2: Book Management (Add, Update, Delete)
create_button(frame, "Add New Book", add_command, 2, 1, columnspan=2)
create_button(frame, "Update Book", update_command, 3, 1, columnspan=2)
create_button(frame, "Delete Book", delete_command, 4, 1, columnspan=2)

# Section 3: Close
create_button(frame, "Close", window.quit, 2, 2, columnspan=2)

# Initialize database and run GUI
connect()
window.mainloop()
